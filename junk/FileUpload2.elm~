module FileUpload where

import String
import Text

import Graphics.Input (Input, input)
import Graphics.Input.Field as Field

import List
import Array

buildResult : (String, String) -> a
buildResult (x, y) = { buildResult | x = y}

--different 'output' port for each calc
--signal in array of strings out
--or a "signal string array" type
port output : Signal [[(String,String)]]
port output = process <~ openFromFile

--Access cols by title row names
--parse title row, turn into array
--select csvfile.column1 and return 0
--use 0 as an index to access data

--get head
--each header should refer to an index number
--i.e. {exposure: 0, quantity: 1, ..., coupon: n}
--
--remove head when dealing with data

--type 'signal string'
port openFromFile : Signal String

process : String -> [[(String,String)]]
process x = x |> String.lines |> map splitWithCommas |> zipUp

--[a,b,c] + [[1,2,3],[4,5,6],[7,8,9]] ->
--[{a:1,b:2,c:3},{a:4,b:5,c:6},{a:7,b:8,c:9}]

zipUp : [[String]] ->  [[(String,String)]]
zipUp xss = List.tail xss |> List.map ( List.head xss |> List.zipWith ( \x y -> buildResult (x, y) ) ) 

-- head
-- map zip head tail

splitWithCommas : String -> [String]
splitWithCommas x = x |> String.split ","


